{"version":3,"sources":["logo.svg","GridCell.js","action.js","App.js","reportWebVitals.js","store.js","index.js"],"names":["GridCell","console","log","this","props","x","sendTileDrop","board","y","classes","undefined","className","onClick","handleClick","Component","connect","state","dispatch","col","type","payload","dropTile","App","cells","push","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","gameOver","createStore","action","tile","current","concat","slice","alert","checkForWinner","counter","checkForTie","ReactDOM","render","store","document","getElementById"],"mappings":"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","file":"static/js/main.63b75bed.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { dropTile } from './action';\r\n\r\n\r\nclass GridCell extends Component{\r\n    //sends the tile to the column that was clicked\r\n    handleClick(){\r\n        console.log(`Clicked on column ${this.props.x}`)\r\n\r\n        this.props.sendTileDrop(this.props.x);\r\n    }\r\n\r\n    render(){\r\n        //define variables\r\n        const board = this.props.board;\r\n        const x = this.props.x;\r\n        const y = this.props.y;\r\n\r\n        let classes = 'cell';\r\n\r\n        //if  the cell is red it is p2\r\nif(board[x][y] != undefined){\r\n    if(board[x][y]=== 'red'){\r\n        classes += ' p2';\r\n        //otherwise p1 (from app.css)\r\n    }else{\r\n        classes += ' p1';\r\n    }\r\n}\r\n\r\n//change the colour of the cell\r\n        return(\r\n            <button className={classes} onClick={() => this.handleClick()}>\r\n                <p>{this.props.x}, {this.props.y}</p>\r\n            </button>\r\n        );\r\n        \r\n    }\r\n}\r\n\r\nconst stateToProps = state => {\r\n    return{\r\n        board: state.board,\r\n    };\r\n};\r\n\r\nconst dispatchToProps = dispatch => {\r\n    return{\r\n        sendTileDrop: col => dispatch(dropTile(col)),\r\n    };\r\n};\r\n\r\n\r\n\r\nexport default connect(stateToProps, dispatchToProps)(GridCell);\r\n//export default GridCell;","//when someone clicks on a column\r\nexport function dropTile(col){\r\n    return{\r\n        type: 'DROP_TILE',\r\n        payload: col,\r\n    };\r\n}","import React, { Component } from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\n\r\nimport GridCell from './GridCell';\r\n\r\nclass App extends Component {\r\n  render(){\r\n    const cells = [];\r\n\r\n    //Enclose all of each row into a container\r\n    for(let y = 5; y >= 0; y--){\r\n      const row = [];\r\n      for(let x = 0; x < 7; x++){\r\n        cells.push(<GridCell key = {x} x={x} y={y} />)\r\n      }\r\n      cells.push(<div key = {y} className= \"row\">{row}</div>)\r\n    }\r\n    return (\r\n      <div className=\"App\">\r\n        <header className=\"App-header\">\r\n          <h1 className= \"App-title\">Connect Four</h1>\r\n        </header>\r\n        {cells}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import { createStore } from 'redux';\r\n\r\n//initial state for my store\r\nconst initial = {\r\n    current: 'red', //can also be yellow\r\n    board: [\r\n        [],  // col 0\r\n        [],  // col 1\r\n        [],  // col 2\r\n        [],  // col 3\r\n        [],  // col 4\r\n        [],  // col 5\r\n        [],  // col 6\r\n    ],\r\n\r\n\r\n};\r\n\r\nexport let gameOver = false;\r\n//function to drop tiles into the board\r\nfunction reducer(state, action){\r\n    if(gameOver === false){\r\n    if(action.type === 'DROP_TILE'){\r\n\r\n        console.log('dropping onto col ' + action.payload);\r\n\r\n        const tile = state.current;\r\n        const col = state.board[action.payload].concat(tile);\r\n\r\n        const board = state.board.slice();\r\n        board[action.payload] = col;\r\n\r\n        checkForWinner(board)\r\n        checkForTie(board)\r\n\r\n        return{\r\n            current: state.current === 'red' ? 'yellow' : 'red',\r\n            board: board,\r\n        };\r\n    }\r\nreturn state;\r\n//if game is over send an alert saying game over\r\n    }else{\r\n        alert(\"GAME OVER!!!!!!\")\r\n        return state;\r\n    }\r\n};\r\n//this function checks if the game is tied\r\nfunction checkForTie(board){\r\n    //define a counter variable to count the number of cells occupied\r\n    let counter = 0\r\n    //loop through each cell\r\n    for(let y=0; y<6; y++) { \r\n        for(let x=0; x<7; x++) {\r\n            //if the cell is undefined increment the counter\r\n            if(typeof board[x][y]!=='undefined') {\r\n                    console.log(board[x][y])\r\n                    counter++\r\n            }\r\n        }\r\n    }\r\n    //if the counter reaches 42 then the game is tied\r\n    if(counter===42){    \r\n        alert(\"Tie Game!\")\r\n        gameOver = true \r\n    }\r\n\r\n\r\n}\r\n\r\nfunction checkForWinner(board){\r\n    //check for winner horizontally\r\n   /* for(let x = 0; x < 7; x++){\r\n        for(let y = 0; y < 6; y++){\r\n            if(typeof board[x][y]!=='undefined' && typeof board[x+1][y]!=='undefined' && typeof board[x+2][y]!=='undefined'&& typeof board[x+3][y]!=='undefined') {\r\n                if((board[x][y]===board[x+1][y] && board[x][y]===board[x+2][y] && board[x][y]===board[x+3][y])){\r\n                    alert(board[x][y]+\" wins!\")\r\n                    gameOver = true\r\n                }\r\n            }\r\n\r\n        }\r\n        \r\n\r\n    }\r\n    */\r\n\r\n    //check for horixontal winner\r\n    //this for loop iterates through each row\r\n    for(let y=0; y<6; y++) {\r\n          \r\n        //this if statement checks for 4 consecutive non undefined cells from x=0 to x=3\r\n        if(typeof board[0][y]!=='undefined' && typeof board[1][y]!=='undefined' && typeof board[2][y]!=='undefined' && typeof board[3][y]!=='undefined') {\r\n            //checks to see if the 4 consecutive non-undefined cells are the same colour\r\n            if((board[0][y]===board[1][y] && board[0][y]===board[2][y] && board[0][y]===board[3][y])){\r\n                alert(board[0][y]+\" wins!\")\r\n                gameOver = true\r\n            }\r\n        }\r\n         //this if statement checks for 4 consecutive non undefined cells from x=1 to x=4\r\n        if(typeof board[1][y]!=='undefined' && typeof board[2][y]!=='undefined' && typeof board[3][y]!=='undefined' && typeof board[4][y]!=='undefined') {\r\n           //checks to see if the 4 consecutive non-undefined cells are the same colour\r\n            if((board[1][y]===board[2][y] && board[1][y]===board[3][y] && board[1][y]===board[4][y])){\r\n                alert(board[1][y]+\" wins!\")\r\n                gameOver = true\r\n            }\r\n        }\r\n        //this if statement checks for 4 consecutive non undefined cells from x=1 to x=4\r\n        if(typeof board[2][y]!=='undefined' && typeof board[3][y]!=='undefined' && typeof board[4][y]!=='undefined' && typeof board[5][y]!=='undefined') {\r\n            //checks to see if the 4 consecutive non-undefined cells are the same colour\r\n            if((board[2][y]===board[3][y] && board[2][y]===board[4][y] && board[2][y]===board[5][y])){\r\n                alert(board[2][y]+\" wins!\")\r\n                gameOver = true\r\n            }\r\n        }\r\n        //this if statement checks for 4 consecutive non undefined cells from x=1 to x=4\r\n        if(typeof board[3][y]!=='undefined' && typeof board[4][y]!=='undefined' && typeof board[5][y]!=='undefined' && typeof board[6][y]!=='undefined') {\r\n           //checks to see if the 4 consecutive non-undefined cells are the same colour\r\n            if((board[3][y]===board[4][y] && board[3][y]===board[5][y] && board[3][y]===board[6][y])){\r\n                alert(board[3][y]+\" wins!\")\r\n                gameOver = true\r\n            }\r\n        }\r\n}\r\n   \r\n\r\n    //check for winner vertically\r\n    //these nested loops and if statements will collectively look for a vertical winner\r\n    //this for loop will loop through all six rows\r\n    for(let y = 0; y < 6;  y++){\r\n        //this for loop will loop through all seven columns\r\n        for(let x = 0; x < 7; x++){\r\n            //this if statement checks for four consctive non-undefined cells (cells that are either red or yellow)\r\n            if(typeof board[x][y]!=='undefined' && typeof board[x][y+1]!=='undefined' && typeof board[x][y+2]!=='undefined' && typeof board[x][y+3]!=='undefined') {\r\n                //this if statement will only be executed if we find 4 consecutive non-undefined cells\r\n                //this if statement checks to see if the four consecutive non-undefined cells are the same colour\r\n                if((board[x][y]===board[x][y+1] && board[x][y]===board[x][y+2] && board[x][y]===board[x][y+3])){\r\n                    //if both if statements are satisfied then we have a winner and the game is over\r\n                    alert(board[x][y]+\" wins!\")\r\n                    gameOver = true\r\n                }\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n}\r\n\r\nexport default createStore(reducer, initial);","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nimport { Provider } from 'react-redux';\r\nimport store from './store';\r\n\r\n\r\nReactDOM.render(\r\n  <Provider  store={store}>\r\n    <App />\r\n  </Provider>,  \r\n  document.getElementById('root')\r\n);\r\n\r\n\r\n\r\n\r\n/*\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,  \r\n  document.getElementById('root')\r\n);\r\n*/\r\n\r\n\r\n\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}